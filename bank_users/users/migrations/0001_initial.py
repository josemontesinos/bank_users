# Generated by Django 3.0.2 on 2020-01-26 09:57

import django.contrib.auth.validators
from django.db import migrations, models
from django.conf import settings
import django.utils.timezone
import localflavor.generic.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.RunSQL(
            'CREATE SCHEMA accounts AUTHORIZATION {user};'.format(user=settings.DATABASES['default']['USER'])
        ),
        migrations.RunSQL(
            "ALTER DATABASE {db_name} SET search_path TO 'django,accounts';".format(
                db_name=settings.DATABASES['default']['NAME']
            )
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('iban', localflavor.generic.models.IBANField(help_text='IBAN code to identify this account.', include_countries=None, max_length=34, unique=True, use_nordea_extensions=False)),
                ('balance', models.FloatField(blank=True, default=0, help_text='Current amount of money in this account.')),
                ('currency', models.IntegerField(choices=[(0, 'Euro'), (1, 'Pound Sterling'), (2, 'US Dollar'), (3, 'Yen'), (4, 'Swiss Franc'), (5, 'Swedish Crown')], default=0, help_text='Currency of this account.')),
                ('create_ts', models.DateTimeField(auto_now_add=True, help_text='Time when this account was created.')),
                ('update_ts', models.DateTimeField(auto_now=True, help_text='Time when this account was last updated.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'accounts"."user',
            },
        ),
    ]
